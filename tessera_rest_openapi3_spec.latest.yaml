openapi: 3.0.3
info:
  title: Tessera API reference
  description: |
    Tessera exposes several independent server APIs that are configured at startup:

    * quorum-to-tessera
    * peer-to-peer
    * third-party

    Depending on the configuration of the node, not all server APIs may be available.
  version: "ace916d3" # TODO(cjh) auto-update doc version from github commit as part of CI process
tags:
  - name: quorum-to-tessera
    description: Operations for Quorum clients
  - name: peer-to-peer
    description: Operations for Tessera clients
  - name: third-party
    description: Operations for third party clients (for example external tools)
paths:
  /api:
    get:
      tags:
        - quorum-to-tessera
        - peer-to-peer
        - third-party
      description: returns JSON or HTML OpenAPI document
      operationId: getOpenApiDocument
      responses:
        "200":
          description: JSON or HTML OpenAPI document
          content:
            application/json:
              schema:
                description: JSON OpenAPI document
                type: string
            text/html:
              schema:
                description: HTML OpenAPI document
                type: string
  /upcheck:
    get:
      tags:
        - quorum-to-tessera
        - peer-to-peer
        - third-party
      description: simple operation to check the server is up
      operationId: upcheck
      responses:
        "200":
          description: I'm up!
          content:
            text/plain:
              schema:
                type: string
              example: "I'm up!"
  /version:
    get:
      tags:
        - quorum-to-tessera
        - peer-to-peer
        - third-party
      description: Tessera distribution version
      operationId: getVersion
      responses:
        "200":
          description: Tessera distribution version
          content:
            text/plain:
              schema:
                type: string
              example: "0.11.0"
      deprecated: true
  /version/distribution:
    get:
      tags:
        - quorum-to-tessera
        - peer-to-peer
        - third-party
      description: Tessera distribution version
      operationId: getDistributionVersion
      responses:
        "200":
          description: Tessera distribution version
          content:
            text/plain:
              schema:
                type: string
              example: "0.11.0"
  /version/api:
    get:
      tags:
        - quorum-to-tessera
        - peer-to-peer
        - third-party
      description: list currently available API versions
      operationId: getApiVersions
      responses:
        "200":
          description: list of available API versions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ["1.0", "2.0"]
  /storeraw:
    post:
      tags:
        - quorum-to-tessera
        - third-party
      description: encrypts a payload and stores result in the "raw" database
      operationId: encryptAndStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: components.yaml#/components/schemas/StoreRawRequest
        required: true
      responses:
        "200":
          description: hash of encrypted payload
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/StoreRawResponse
  /keys:
    get:
      tags:
        - third-party
      description: get all public keys managed by the server's enclave
      operationId: getPublicKeys
      responses:
        "200":
          description: server's public keys
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/GetPublicKeysResponse
  /partyinfo/keys:
    get:
      tags:
        - third-party
      description: get public keys of all known nodes in the network, including the server's own keys
      operationId: getPartiesPublicKeys
      responses:
        "200":
          description: known nodes' public keys
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/GetPartiesPublicKeysResponse
  /partyinfo:
    get:
      tags:
        - peer-to-peer
      description: fetch network/peer information
      operationId: getPartyInfo
      responses:
        "200":
          description: server's partyinfo data
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/GetPartyInfoResponse
    post:
      tags:
        - peer-to-peer
      description: broadcast partyinfo information to server
      operationId: broadcastPartyInfo
      parameters:
      - name: clientSupportedApiVersions
        in: header
        description: client's supported API versions
        schema:
          type: array
          items:
            type: string
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              $ref: components.yaml#/components/schemas/BroadcastPartyInfoRequest
      responses:
        "200":
          description: server successfully updated its party info
          content:
            application/octet-stream:
              schema:
                $ref: components.yaml#/components/schemas/BroadcastPartyInfoResponse
  /partyinfo/validate:
    post:
      tags:
        - peer-to-peer
      description: decrypt a UUID payload (used to validate ownership of an asymmetric key pair)
      operationId: validateParty
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: components.yaml#/components/schemas/ValidatePartyRequest
      responses:
        "200":
          description: successfully decrypted payload
          content:
            text/plain:
              schema:
                $ref: components.yaml#/components/schemas/ValidatePartyResponse
        "400":
          description: decrypted payload is not a valid UUID
  /pushBatch:
    post:
      tags:
        - peer-to-peer
      description: store batch of encoded payloads to the server's database (available only when the server is in recovery mode)
      operationId: pushPayloadBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: components.yaml#/components/schemas/PushBatchRequest
      responses:
        "200":
          description: batch successfully stored
  /push:
    post:
      tags:
        - peer-to-peer
      description: store encoded payload to the server's database
      operationId: pushPayload
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: components.yaml#/components/schemas/PushRequest
      responses:
        "201":
          description: hash of encrypted payload
          content:
            text/plain:
              schema:
                $ref: components.yaml#/components/schemas/PushResponse
        "403":
          description: server is in recovery mode and encoded payload is not a Standard Private transaction
  /resend:
    post:
      tags:
        - peer-to-peer
      description: initiate resend of either an INDIVIDUAL transaction or ALL transactions involving a given public key
      operationId: requestPayloadResend
      requestBody:
        content:
          application/json:
            schema:
              $ref: components.yaml#/components/schemas/ResendRequest
      responses:
        "200":
          description: resent payload
          content:
            text/plain:
              schema:
                $ref: components.yaml#/components/schemas/ResendResponse
  /resendBatch:
    post:
      tags:
        - peer-to-peer
      description: initiate resend of all transactions for a given public key in batches
      operationId: requestPayloadBatchResend
      requestBody:
        content:
          application/json:
            schema:
              $ref: components.yaml#/components/schemas/ResendBatchRequest
      responses:
        "200":
          description: count of total transactions being resent
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/ResendBatchResponse
  /encodedPayload/create:
    post:
      tags:
        - quorum-to-tessera
      description: encrypt a payload and return the result; does not store to the database or push to peers
      operationId: encrypt
      requestBody:
        content:
          application/json:
            schema:
              $ref: components.yaml#/components/schemas/EncryptPayloadRequest
      responses:
        "200":
          description: encrypted payload
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/EncryptPayloadResponse
  /encodedPayload/decrypt:
    post:
      tags:
        - quorum-to-tessera
      description: decrypt an encrypted payload and return the result; does not store to the database or push to peers
      operationId: decrypt
      requestBody:
        content:
          application/json:
            schema:
              $ref: components.yaml#/components/schemas/DecryptPayloadRequest
      responses:
        "200":
          description: decrypted payload
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/DecryptPayloadResponse
  /send:
    post:
      tags:
        - quorum-to-tessera
      description: encrypts a payload, stores result in database, and publishes result to recipients
      operationId: encryptStoreAndSend
      requestBody:
        content:
          application/json:
            schema:
              $ref: components.yaml#/components/schemas/SendPayloadRequest
      responses:
        "201":
          description: encrypted payload hash
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/SendPayloadResponse
  /sendraw:
    post:
      tags:
        - quorum-to-tessera
      description: encrypts a payload, stores result in database, and publishes result to recipients
      operationId: encryptStoreAndSend (deprecated)
      deprecated: true
      parameters:
        - name: c11n-from
          in: header
          description: public key identifying the server's key pair that will be used in the encryption; if not set, default used
          schema:
            type: string
            format: base64
        - name: c11n-to
          in: header
          description: comma-separated list of recipient public keys
          schema:
            type: string
            format: base64
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: components.yaml#/components/schemas/SendRawPayloadRequest
      responses:
        "200":
          description: encrypted payload hash
          content:
            text/plain:
              schema:
                $ref: components.yaml#/components/schemas/SendRawPayloadResponse
  /sendsignedtx:
    post:
      tags:
        - quorum-to-tessera
      description: re-wraps a pre-stored & pre-encrypted payload, stores result in database, and publishes result to recipients
      operationId: sendStored
      parameters:
      - name: c11n-to
        in: header
        description: comma-separated list of recipient public keys (for application/octet-stream requests)
        schema:
          type: string
          format: base64
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: components.yaml#/components/schemas/SendStoredPayloadRequestOctetStream
          application/json:
            schema:
              $ref: components.yaml#/components/schemas/SendStoredPayloadRequestJson
      responses:
        "200":
          description: hash of rewrapped payload (for application/octet-stream requests)
          content:
            text/plain:
              schema:
                $ref: components.yaml#/components/schemas/SendStoredPayloadResponse
        "201":
          description: hash of rewrapped payload (for application/json requests)
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/SendStoredPayloadResponse
  /receive:
    get:
      tags:
        - quorum-to-tessera
      description: get payload from database, decrypt, and return
      operationId: getDecryptedPayload
      requestBody:
        content:
          application/json:
            schema:
              $ref: components.yaml#/components/schemas/GetDecryptedPayloadRequestJson
      responses:
        "200":
          description: decrypted payload
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/GetDecryptedPayloadResponseJson
  /transaction/{hash}:
    get:
      tags:
        - quorum-to-tessera
      description: get payload from database, decrypt, and return
      operationId: getDecryptedPayload (deprecated)
      deprecated: true
      parameters:
        - name: hash
          in: path
          description: hash indicating encrypted payload to retrieve from database
          schema:
            type: string
            format: base64
          required: true
        - name: to
          in: query
          description: (optional) public key of recipient of the encrypted payload; used in decryption; if not provided, decryption is attempted with all known recipient keys in turn
          schema:
            type: string
            format: base64
        - name: isRaw
          in: query
          description: |
            (optional) indicates whether the payload is raw; determines which database the payload is retrieved from; possible values
            * true - for pre-stored payloads in the "raw" database
            * false (default) - for already sent payloads in "standard" database
          schema:
            type: string
      responses:
        "200":
          description: decrypted payload
          content:
            application/json:
              schema:
                $ref: components.yaml#/components/schemas/GetDecryptedPayloadResponseJson
    delete:
      tags:
        - quorum-to-tessera
      description: delete payload from database
      operationId: delete
      parameters:
        - name: hash
          in: path
          description: hash indicating encrypted payload to delete from database
          schema:
            type: string
            format: base64
          required: true
      responses:
        "204":
          description: delete successful
  /receiveraw:
    get:
      tags:
        - quorum-to-tessera
      description: get payload from database, decrypt, and return (for Constellation backwards compatibility)
      operationId: getDecryptedPayload (deprecated-c11n)
      deprecated: true
      parameters:
        - name: c11n-key
          in: header
          description: hash indicating encrypted payload to retrieve from database
          schema:
            type: string
            format: base64
          required: true
        - name: c11n-to
          in: header
          description: (optional) public key of recipient of the encrypted payload; used in decryption; if not provided, decryption is attempted with all known recipient keys in turn
          schema:
            type: string
            format: base64
      responses:
        "200":
          description: decrypted ciphertext payload
          content:
            application/octet-stream:
              schema:
                $ref: components.yaml#/components/schemas/GetDecryptedPayloadResponseOctetStream
  /delete:
    post:
      tags:
        - quorum-to-tessera
      description: delete payload from database
      operationId: delete (deprecated)
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: components.yaml#/components/schemas/DeleteRequest
      responses:
        "200":
          description: delete successful
          content:
            text/plain:
              schema:
                type: string
              example: "Delete successful"
  /transaction/{hash}/isSender:
    get:
      tags:
        - quorum-to-tessera
      description: check if the server was the sender of a transaction
      operationId: isSender
      parameters:
        - name: hash
          in: path
          description: hash indicating encrypted payload to check sender for
          schema:
            type: string
            format: base64
          required: true
      responses:
        "200":
          description: is server the sender
          content:
            application/json:
              schema:
                type: boolean
                description: is server the sender
  /transaction/{hash}/participants:
    get:
      tags:
        - quorum-to-tessera
      description: get list of recipient public keys for a transaction
      operationId: getRecipients
      parameters:
        - name: hash
          in: path
          description: hash indicating encrypted payload to get recipients for
          schema:
            type: string
            format: base64
          required: true
      responses:
        "200":
          description: comma-separated list of recipients
          content:
            text/plain:
              schema:
                type: string
                description: comma-separated list of recipients
              example: "ROAZBWtSacxXQrOe3FGAqJDyJjFePR5ce4TSIzmJ0Bc=,BULeR8JyUWhiuuCMU/HLA0Q5pzkYT+cHII3ZKBey3Bo="

